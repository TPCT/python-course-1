def cheapest_path(t, start, finish, count=0, first=True, data_list = []):
	X1, Y1 = start[0], start[1]
	if first:
		count = t[X1][Y1]

	def has_new_pos():
		pos_move = {}
		if X1 + 1 < len(t):
			pos_move.update({(X1 + 1, Y1): 'down'})
		if X1 - 1 > -1:
			pos_move.update({(X1 - 1, Y1): 'up'})
		if Y1 + 1 < len(t[X1]):
			pos_move.update({(X1, Y1 + 1): 'right'})
		if Y1 - 1 > -1:
			pos_move.update({(X1, Y1 - 1): 'left'})
		return pos_move

	count_list = {count + t[key[0]][key[1]]: [(key[0], key[1]), val] for key, val in has_new_pos().items()}
	count = min(count_list.keys())
	data_list += [count_list[min(count_list.keys())][1]]
	if start == finish:
		print(data_list, count)
	else:
		cheapest_path(t,  count_list[min(count_list.keys())][0], finish, count, False, data_list)

from sys import setrecursionlimit
setrecursionlimit(100000000)
from time import time
#time_out_problem
def triangle1(row):
	if len(row) > 1:
		row, new_data1, new_data2 = list(row.replace(' ', '')), '', ''
		while len(row) > 1:
			colors = ['R', 'G', 'B']
			try:
				if row[0] == row[1]:
					new_data1 += row[0]
			from sys import setrecursionlimit
setrecursionlimit(100000000)
from time import time

def triangle1(row):
	if len(row) > 1:
		row, new_data1, new_data2 = list(row.replace(' ', '')), '', ''
		while len(row) > 1:
			colors = ['R', 'G', 'B']
			try:
				if row[0] == row[1]:
					new_data1 += row[0]
				else:
					colors.pop(colors.index(row[0])), colors.pop(colors.index(row[1]))
					new_data1 += colors[0]
				del row[0]
			except: pass
			colors = ['R', 'G', 'B']
			try:
				if row[-1] == row[-2]:
					new_data2 += row[i]
				else:
					colors.pop(colors.index(row[-1])), colors.pop(colors.index(row[-2]))
					new_data2 += colors[0]
				del row[-1]
			except: pass
		new_data1 += new_data2[::-1]
		return triangle1(new_data1)
	else:
		return row

def triangle2(row):
	print((len(row)**2)/2)
	row, i = list(row.replace(' ', '')), 0
	main_counter = 0
	while len(row) > 1:
		if i < lefrom sys import setrecursionlimit
setrecursionlimit(100000000)
from time import time

def triangle1(row):
	if len(row) > 1:
		row, new_data1, new_data2 = list(row.replace(' ', '')), '', ''
		while len(row) > 1:
			colors = ['R', 'G', 'B']
			try:
				if row[0] == row[1]:
					new_data1 += row[0]
				else:
					colors.pop(colors.index(row[0])), colors.pop(colors.index(row[1]))
					new_data1 += colors[0]
				del row[0]
			except: pass
			colors = ['R', 'G', 'B']
			try:
				if row[-1] == row[-2]:
					new_data2 += row[i]
				else:
					colors.pop(colors.index(row[-1])), colors.pop(colors.index(row[-2]))
					new_data2 += colors[0]
				del row[-1]
			except: pass
		new_data1 += new_data2[::-1]
		return triangle1(new_data1)
	else:
		return row

def triangle2(row):
	print((len(row)**2)/2)
	row, i = list(row.replace(' ', '')), 0
	main_counter = 0
	while len(row) > 1:
		if i < len(row)-1:
			if row[i] == row[i + 1]:
				row[i] = row[i+1]
			else:
				colors = ['R', 'G', 'B']
				del colors[colors.index(row[i])], colors[colors.index(row[i+1])]
				row[i] = colors[0]
			i += 1
		else:
			i = 0
			row.pop()
		main_counter += 1
	return row[0], main_counter

def benchmarking(func, reps, *args):
	start = time()
	for i in range(reps):
		func(*args)
	return time()-startn(row)-1:
			if row[i] == row[i + 1]:
				row[i] = row[i+1]
			else:
				colors = ['R', 'G', 'B']
				del colors[colors.index(row[i])], colors[colors.index(row[i+1])]
				row[i] = colors[0]
			i += 1
		else:
			i = 0
			row.pop()
		main_counter += 1
	return row[0], main_counter

def benchmarking(func, reps, *args):
	start = time()
	for i in range(reps):
		func(*args)
	return time()-start	else:
					colors.pop(colors.index(row[0])), colors.pop(colors.index(row[1]))
					new_data1 += colors[0]
				del row[0]
			except: pass
			colors = ['R', 'G', 'B']
			try:
				if row[-1] == row[-2]:
					new_data2 += row[i]
				else:
					colors.pop(colors.index(row[-1])), colors.pop(colors.index(row[-2]))
					new_data2 += colors[0]
				del row[-1]
			except: pass
		new_data1 += new_data2[::-1]
		return triangle1(new_data1)
	else:
		return row

def triangle2(row):
	print((len(row)**2)/2)
	row, i = list(row.replace(' ', '')), 0
	main_counter = 0
	while len(row) > 1:
		if i < len(row)-1:
			if row[i] == row[i + 1]:
				row[i] = row[i+1]
			else:
				colors = ['R', 'G', 'B']
				del colors[colors.index(row[i])], colors[colors.index(row[i+1])]
				row[i] = colors[0]
			i += 1
		else:
			i = 0
			row.pop()
		main_counter += 1
	return row[0], main_counter

def benchmarking(func, reps, *args):
	start = time()
	for i in range(reps):
		func(*args)
	return time()-start
matrix = [[1, 2, 8],
		  [2, 8, 8],
		  [5, 5, 8],
		  [2, 5, 6]]
print(cheapest_path(matrix, (2, 2), (0, 0)))
