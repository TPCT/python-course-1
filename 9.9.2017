import os, time
def selection_sort1(array):
    new_array = array.copy()
    array = array.copy()
    for i in range(len(array)):
        minimium = min(new_array)
        new_array.remove(minimium)
        array[i] = minimium
    return array

def selection_sort2(array):
    for i in range(len(array)):
        temp, minimium = array[i], min(array[i:])
        index = array[i:].index(minimium)
        array[i] = minimium
        array[i+index] = temp
    return array

def insert_sort(array):
    sorted_array, new_array = [array[0]], array[1:].copy()
    while new_array:
        item = new_array[0]
        for i in range(len(sorted_array)):
            if sorted_array[i] >= item:
                sorted_array = sorted_array[:i] + [item] + sorted_array[i:]
                break
        else:
            sorted_array.append(item)
        new_array = new_array[1:]
    return sorted_array

def shell_sort1(array):
    n = len(array)
    gap = n // 2
    array = array.copy()
    while gap > 0:
        for i in range(gap, n-gap):
            j = i
            while 0 <= j < n-gap:
                if array[j] > array[j+gap]:
                    array[j], array[j+gap] = array[j+gap], array[j]
                    j = i
                    continue
                if array[j-gap] > array[j] and j-gap >= 0:
                    array[j-gap], array[j] = array[j], array[j-gap]
                    j -= gap
                    continue
                j += gap

        gap //= 2
    return array

def shell_sort2(array):
    n = len(array)
    array = array.copy()
    gap = n // 2
    while gap:
        for i in range(gap, n):
                temp = array[i]
                j = i
                while j >= gap and array[j-gap] > temp:
                    array[j] = array[j-gap]
                    j -= gap
                array[j] = temp
        gap //= 2
    return array

def bubble_sort(array):
    array = array.copy()
    for i in range(len(array)):
        for q in range(len(array)-i-1):
            if array[q] > array[q+1]:
                array[q], array[q+1] = array[q+1], array[q]
    return array

def create_dictionary(word_length, dict_length):
    from string import ascii_lowercase
    from random import randint, choice
    dictionary = []
    for i in range(dict_length):
        create_word = lambda word_length: ''.join([choice(ascii_lowercase) for x in range(word_length)])
        word = create_word(word_length)
        while word in dictionary:
            word = create_word(word_length)
        dictionary.append(word)
    return dictionary

def binary_search(word, dictionary):
    n = len(dictionary) // 2
    while n:
        if word > dictionary[n]:
            dictionary = dictionary[n:]
            n = len(dictionary) // 2
            continue
        elif word < dictionary[n]:
            dictionary = dictionary[:n]
            n = len(dictionary) // 2
            continue
        elif word == dictionary[n]:
            return word
        else:
            return 'Word not found'
def quadratic(eqn=""):
	
	quadratics = ['x**2', 'x*x', 'x^2']
	first_degree = ['x', 'x*1', 'x^1']
	eqn = eqn.lower().replace('(', '').replace(')', '').replace(' ', '')
	# 2x^(2) + 2(x) + 1 -> 2x^2+2x+1
	eqn = eqn.split('+') + eqn.split('-') #2x^2+2x+1 => [2x^2, 2x, 1]
	quadcoff = 0
	fdegcoff = 0
	const = 0
	for i in eqn:
		index = 0
		for q in range(len(i)):
			if i[q] == 'x':'''for i in ascii_letters:
		if i in eqn and i.lower() != 'x':
			raise ValueError('Please enter valid eqn')'''
				index = q
				break
		else:
			const += float(i) if i else 0
		new_result = ''
		for x in range(index, len(i)):
			new_result += i[x]
		if new_result in quadratics:
			if i[:index]:
				quadcoff += float(i[:index])
			else:
				quadcoff += 1.0
		elif new_result in first_degree:
			if i[:index]:
				fdegcoff += float(i[:index])
			else:
				fdegcoff += 1.0
	disc = fdegcoff**2 - 4*quadcoff*const
	result = []
	if disc >= 0:
		disc **= 0.5
		result.append((-fdegcoff + disc) / (2*quadcoff))
		result.append((-fdegcoff + disc) / (2*quadcoff))
		return set(result)
	else:
		raise ValueError('Disc. Must be +ve')
class File_Tree(object):
	import os

	def __init__(self, path, write_to_file = False, dest=os.path.join(os.path.dirname(__file__), str(time.localtime(time.time()).tm_mday))):
		self.data = ''
		if write_to_file:
			self.file_write = open(dest, 'a+')
			if len(self.file_write.read()) > 0:
				self.file_write.write('------------\n')
		self.init(path, 0, write_to_file)
		if 'file_write' in self.__dict__:
			self.file_write.close()

	def init(self, path, indent, write_to_file):
		if self.os.path.exists(path):
			if write_to_file:
				self.file_write.write('%s|_%s\n' % (' ' * indent, self.os.path.split(path)[-1]))
			print('%s|_%s' % (' ' * indent, self.os.path.split(path)[-1]))
			if not self.os.path.isdir(path):
				for i in self.os.listdir(path):
					self.init(self.os.path.join(path, i), indent + 3, write_to_file)
		else:
			return 'This Path Cannot Be Found'
class File_Manager:
	class ScanError(Exception):
		__module__ = Exception.__module__
		pass
	class IOWrapper(Exception):
		__module__ = Exception.__module__
	class NoNEmptyDir(Exception):
		__module__ = Exception.__module__
	class LackOfPermissions(PermissionError):
		__module__ = Exception.__module__
	class PrevDirsNotExists(Exception):
		__module__ = Exception.__module__
	import os, subprocess, sys, collections, traceback, pwd, time, inspect
	from io import TextIOWrapper
	stdout = sys.stdout
	__perm_dict = {7: 'RWX', 6: 'RW-', 4: '-W-', 2: 'R--', 1: '--X', 0: '---', 3: 'R-X', 5: '-WX'}
	def __init__(self, path=None):
		path = path if path != None else self.os.getcwd()
		if self.os.path.exists(path):
			self.__path = self.os.path.realpath(path)
			self.__stat = self.os.stat(path)
		else:
			print("Please enter valid path")
	def __recursive_search(self, path, capture_output=True, Return=False, spacing=0, stdout=None):
		if not Return and not capture_output:
			Return = True
		stdout = stdout if stdout != None else self.stdout
		if not isinstance(stdout, self.TextIOWrapper):
			raise IOWrapper('Cannot write to this IOWrapper')
		path_name = self.os.path.split(path)[-1]
		path_list = {path_name:[]}
		try:
			if self.os.access(path, self.os.R_OK):
				if capture_output and self.inspect.getouterframes(self.inspect.currentframe(), 4)[1][3] != '__recursive_search':
					stdout.write('|%s\n' % self.os.path.split(path)[-1])
			else:
				if capture_output and self.inspect.getouterframes(self.inspect.currentframe(), 4)[1][3] != '__recursive_search':
					stdout.write('|%s\n' % self.os.path.split(path)[-1], '--<LACK OF PERMISSIONS [cannot list this file]>--')
			stdout.flush()
			for _path in self.os.listdir(path):
				file_name = self.os.path.split(_path)[-1]
				_path = self.os.path.join(path, _path)
				perm = self.__get_perms(_path)
				owner = self.__get_owner(_path)
				ctime = self.__get_ctime(_path)
				if self.os.path.isfile(_path):
					if capture_output:
						stdout.write('%s|->(%s) %s%s%s %s %s\n' % (' '*spacing, file_name, *perm, owner, ctime))
					if Return:
						path_list[path_name].append('-%s%s%s %s %s %s' % (*perm, owner, ctime, file_name))
					stdout.flush()
				else:
					OK = self.os.access(_path, self.os.R_OK)
					if capture_output:
						if OK:
							stdout.write('%s|->[%s] %s%s%s %s %s\n' % (' '*spacing, file_name, *perm, owner, ctime))
						else:
							stdout.write(' '*spacing + '|->[%s] %s%s%s %s %s --<LACK OF PERMISSIONS [cannot list this file]>--\n' % (file_name, *perm, owner, ctime))
						if not Return:
							self.__recursive_search(_path,  capture_output, Return,spacing + 3, stdout=stdout)
					if Return:
						if OK:
								path_list[path_name].append(self.__recursive_search(_path,  capture_output, Return,spacing + 3, stdout=stdout))
						else:
								path_list[path_name].append({file_name: "LACK OF PERMISSIONS [cannot list this file]"})
		except FileNotFoundError:
			pass
		except self.LackOfPermissions:
			path_list[path_name] = "LACK OF PERMISSIONS [cannot list this file]"
		try:
			if self.inspect.getouterframes(self.inspect.currentframe, 4)[1][3] == '__recursive_search':
				return path_list
		except:
			pass
		if Return:
			return path_list
	def __get_perms(self, path):
		__perm = oct(self.os.stat(path)[0])[-3:]
		perm = self.collections.namedtuple("Permissions", ['Groups', 'Owner', 'Others'])
		perm = perm(*(self.__perm_dict[int(__perm[x])] for x in range(3)))
		return perm
	def __get_owner(self, path):
		return self.pwd.getpwuid(self.os.stat(path).st_uid).pw_name
	def __get_ctime(self, path):
		return self.time.strftime("[%Y-%m-%d]|%I-%M-%S|", self.time.localtime(self.os.stat(path).st_ctime))
	def __check_previous_path(self, path):
		return True if self.os.path.exists(self.os.path.split(path)[0]) and self.os.path.isdir(self.os.path.split(path)[0]) else False
	def __check_empty(self, path):
		counter = 0
		for i in self.os.listdir(path):
			counter +=1
			if counter:
				return False
		return True
	def chdir(self, path):
		if self.os.path.exists(path):
			self.__path = path
		else:
			print("Cannot change path to non-exist path")
	def scan_path(self, path=None, recursive=False, capture_output=True, Return=False, stdout=None):
		path = path if path != None else self.__path
		if self.os.path.isdir(path):
			data = self.__recursive_search(path, capture_output, Return, stdout=stdout)
			return data
		raise self.ScanError()
	def delete(self, path=None, recursive=False):
		def error():
			raise FileNotFoundError()
		path = path if path != None else self.__path
		if self.os.path.isfile(path):
			try:
				self.os.remove(path)
			except FileNotFoundError:
				raise FileNotFoundError()
			except self.LackOfPermissions:
				raise self.LackOfPermissions()
		else:
			if self.__check_empty(path):
				try:
					self.os.rmdir(path)
				except FileNotFoundError:
					raise FileNotFoundError()
				except self.LackOfPermissions:
					raise self.LackOfPermissions()
			elif recursive:
				try:
					self.os.rmdirs(path)
				except FileNotFoundError:
					raise FileNotFoundError()
				except self.LackOfPermissions:
					raise self.LackOfPermissions()
			else:
				raise self.NoNEmptyDir()
	def rename(self, path=None, recursive=True):
		if self.os.path.exists(path):
			if self.os.path.isfile(path):
				try:
					self.os.rename(file)
				except FileNotFoundError:
					raise FileNotFoundError()
				except self.LackOfPermissions:
					raise self.LackOfPermissions()
			else:
				if self.__check_previous_path(path):
					try:
						self.os.rename(path)
					except FileNotFoundError:
						raise FileNotFoundError()
					except self.LackOfPermissions:
						raise self.LackOfPermissions
				elif recursive:
					try:
						self.os.renames(path)
					except FileNotFoundError:
						raise FileNotFoundError()
					except self.LackOfPermissions:
						raise self.LackOfPermissions()
				else:
					raise self.PrevDirsNotExists()
		else:
			raise FileNotFoundError()
	__call__ = chdir
	@property
	def atime(self):
		self.__stat = self.os.stat(self.__path)
		return self.time.strftime("[%Y-%m-%d]|%I-%M-%S|", self.time.localtime(self.__stat.st_atime))
	@property
	def mtime(self):
		self.__stat = self.os.stat(self.__path)
		return self.time.strftime("[%Y-%m-%d]|%I-%M-%S %p|", self.time.localtime(self.__stat.st_mtime))
	@property
	def ctime(self):
		self.__stat = self.os.stat(self.__path)
		return self.time.strftime("[%Y-%m-%d]|%I-%M-%S %p|", self.time.localtime(self.__stat.st_ctime))
	@property
	def owner(self):
		return self.pwd.getpwuid(self.__stat.st_uid).pw_name
	@property
	def perm(self):
		__perm = oct(self.__stat[0])[-3:]
		perm = self.collections.namedtuple("Permissions", ['Groups', 'Owner', 'Others'])
		perm = perm(*(self.__perm_dict[int(__perm[x])] for x in range(3)))
		return perm
	@property
	def path(self):
		return self.__path
	@property
	def type(self):
		if self.os.path.isdir(self.__path):
			return "DIR"
		return "FILE"

if __name__ == '__main__':
	#tests
	File_Tree(os.path.dirname(__file__), True)
	File_Tree(os.path.realpath('/'), True)

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
primes = lambda n: [x for x in range(2, n+1) if x >= 2 and (len([x for check in range(2, x) if (x % check == 0 and check != x)]) == 0)]
def interpreter(code, tape):
    result = tape
    def icot(code=code):
        opening_tag = dict()
        op_tag = []
        sub_counter = 0
        for command in code:
            if command == '[':
                op_tag += [sub_counter]
            elif command == ']':
                opening_tag[op_tag.pop()] = sub_counter
            sub_counter += 1
        return opening_tag
    tape_counter = 0
    command_counter = 0
    command_freeze = False
    tags = icot()
    while 0 <= tape_counter < len(tape) and 0 <=  command_counter < len(code):
        command = code[command_counter]
        if command == '>':
            command_counter += 1
            tape_counter += 1
        elif command == '<':
            command_counter += 1
            tape_counter -= 1
        elif command == '*':
            if 0 <= tape_counter < len(result):
                result = list(result)
                if result[tape_counter] == '0':
                    result[tape_counter] = '1'
                else:
                    result[tape_counter] = '0'
                result = ''.join(result)
            else:
                return result
            command_counter += 1
        elif command == '[':
            tags[tags[command_counter]] = command_counter
            if result[tape_counter] == '0':
                command_counter = tags[command_counter]
            else:
                command_counter += 1
        elif command == ']':
            if result[tape_counter] == '1':
                command_counter = tags[command_counter]
            else:
                command_counter += 1
        else:
            command_counter += 1
    return result
def simple_game():
    import sys, os, random
    gamer_choice = input('please choose X or O to start: ')
    cells, non_used_cells = ['_' for x in range(9)], list(range(1, 10))
    available_choices, main_matrix = ['x', 'o'], []

    def print_matrix(data, length=3):
        import sys
        counter = 0
        main_board_string = ''
        for i in range(len(data)):
            if (i + 1) % length == 0:
                sys.stdout.write(str(data[i]) + '\n')
                main_board_string += str(data[i] + '\n')
                counter += 1
            else:
                sys.stdout.write(str(data[i]) + ' ')
                main_board_string += str(data[i]) + ' '
            sys.stdout.flush()
        return main_board_string

    def main_board_matrix(data):
        data = data.rstrip()
        main_matrix = []
        for i in data.split('\n'):
            main_matrix.append(i.split())
        return main_matrix

    def check_win(data):
        def col_check():
            nonlocal data
            cols = []
            for index in range(len(data[0])):
                cols.append([data[0][index]])
                for row in data[1:]:
                    cols[index] += [row[index]]
            for col in cols:
                player = list(set(col))[0]
                if len(set(col)) == 1 and player != '_':
                    return True, player

        def row_check():
            nonlocal data
            for row in data:
                player = list(set(row))[0]
                if len(set(row)) == 1 and player != '_':
                    return True, player

        def diagonal_check():
            counter, right_diagonal = 0, []
            nonlocal data
            for row in data:
                right_diagonal.append(row[counter])
                counter += 1
            player = list(set(right_diagonal))[0]
            if len(set(right_diagonal)) == 1 and player != '_':
                return True, player
            counter, left_diagonal = 0, []
            for row in data:
                left_diagonal.append(row[-counter])
                counter += 1
            player = list(set(left_diagonal))[0]
            if len(set(left_diagonal)) == 1 and player != '_':
                return True, player
        rows_check = row_check()
        cols_check = col_check()
        diagonal_check = diagonal_check()
        if rows_check:
            return rows_check[1]
        elif cols_check:
            return cols_check[1]
        elif diagonal_check:
            return diagonal_check[1]
    if gamer_choice.upper() == 'X' or gamer_choice.upper() == 'O':
        del available_choices[available_choices.index(gamer_choice.lower())]
        print('[+] The game started.')
        while non_used_cells:
            try:
                player_choice = int(input('[+] Please Enter Cell Number %s: ' % non_used_cells))
                if player_choice not in non_used_cells:
                    print('[+] Please Enter Valid Cell Number. Game will stop')
                    os._exit(1)
            except ValueError:
                print('[+] Please Enter Valid Cell Number. Game will stop')
                os._exit(1)
            else:
                if 1 <= player_choice <= 9:
                    cells[player_choice-1] = gamer_choice
                    del non_used_cells[non_used_cells.index(player_choice)]
                    if non_used_cells:
                        computer_choice = random.choice(non_used_cells)
                        cells[computer_choice - 1] = available_choices[0]
                        del non_used_cells[non_used_cells.index(computer_choice)]
                    checker = check_win(main_board_matrix(print_matrix(cells)))
                    if checker:
                        print("%s Has win" % checker)
                        break
                else:
                    print('[+] Please Enter Valid Cell Number. Game will stop')
    else:
        os.system('clear') if not sys.platform.__contains__('win') else os.system('clear')
        simple_game()

def find_prime_kPerm(n, kPerm):
    from itertools import permutations as perm
    def is_prime(number):
        for i in range(2, number):
            if number % i == 0 and not number == 2:
                return False
        return True
    primes = [x for x in range(12, n+1) if is_prime(x)]
    res = []
    for i in primes:
        required_perm = [int(''.join(list(x))) for x in perm(str(i))]
        required_perm = [x for x in required_perm if is_prime(x) and x != i and len(str(x)) == len(str(i))]
        if len(required_perm) == kPerm:
            res += [i]
    if len(res) == 0:
        return [0, 0, 0]
    else:
        return [len(res), min(res), max(res)]

def skrzat(base, number):
    if base == 'b':
        number = number[::-1]
        decoded_number = 0
        for i in range(len(number)):
            decoded_number += ((-2)**i) * int(number[i])
        return 'From binary: %s is %s' % (number[::-1], decoded_number)
    elif base == 'd':
        x = number
        if number == 0:
            return "0"
        converted_number = ""
        while number != 0:
            remainder = number % -2
            number //= -2
            if remainder < 0:
                remainder += 2
                number += 1
            converted_number += str(abs(remainder))
        return "From decimal: %s is %s" % (x, converted_number[::-1])
    else:
        return None
    pass
def knights_tour(start, size):
    import time, copy

    def make_board(size):
        return {(x, y): 0 for x in range(1, size+1) for y in range(1, size+1)}
    my_board = make_board(size)
    my_board[tuple(start)] = 1
    moves = [tuple(start)]
    next_move = start
    knight_moves = ((1, 2), (-1, 2), (2, 1), (-2, 1), (2, -1), (-2, -1), (-1, -2), (1, -2))

    def make_string_from_board(my_board):
        board = []
        for row in range(size):
            board += [[]]
            for column in range(size):
                board[row] += [my_board[(column+1, row+1)]]
        return board
    def avail_moves(point, board):
        return set((point[0]+_x, point[1]+_y) for _x, _y in knight_moves if (1 <= point[0]+_x <= size
                   and 1 <= point[1]+_y <= size) and not board[(point[0]+_x, point[1]+_y)])
    counter = 0

    def accessability(move):
        access = []
        board = copy.deepcopy(my_board)
        for position in avail_moves(move, board):
            board[position] = 1
            access.append((len(avail_moves(position, board)), position))
            board[position] = 0
        return access
    while counter < size * size:
        if accessability(next_move):
            next_move = min(accessability(next_move))[1]
            my_board[next_move] = 1
            moves += [next_move]
            counter += 1
        else:
            break
    print(*make_string_from_board(my_board))
    return moves


def sorting_algorithm(lst):
    main_list = []; [main_list.append(x) for x in lst if not x in main_list]
    sorted_array = []
    while main_list:
        smallest_number = main_list[0]
        for number in main_list[1:]:
            if number < smallest_number:
                smallest_number = number
        main_list.remove(smallest_number)
        sorted_array += [smallest_number]
    return sorted_array
def simple_assembler(program):
    to_be_excuted = [line.split(" ") for line in program.split("\n")]
    Done = []
    enteries = {}
    nov = lambda x: int(x) if str(x).replace("-", "").isnumeric() else int(enteries[x])
    while to_be_excuted:
        excuting = to_be_excuted.pop(0)
        Done += [excuting]
        if excuting[0] == "mov":
            enteries[excuting[1]] = nov(excuting[2])
        elif excuting[0] == "inc":
            enteries[excuting[1]] += 1
        elif excuting[0] == "dec":
            enteries[excuting[1]] -= 1
        elif excuting[0] == "jnz":
            if nov(excuting[2]) < 0:
                if enteries[excuting[1]] > 0:
                    to_be_excuted = Done[int(nov(excuting[2]))-1:] + to_be_excuted
                    Done = Done[:int(nov(excuting[2]))-1]
                else:
                    continue
            else:
                to_be_excuted = to_be_excuted[int(nov(excuting[2])):]
    return enteries 
def brainfuck_to_c(source_code):
    if source_code.count("[") == source_code.count("]"):
        while source_code.count("[]") > 0:
            source_code = source_code.replace("[]", "")
        data = dict(); identifier = 0; counter = 0
        for char in source_code:
            if char == "+" or char == '-' or char == '>' or char == '<':
                if counter != 0 and char != source_code[counter - 1]:
                    identifier += 1
                if (str(identifier), char) in data.keys():
                    data[(str(identifier), char)] += str(identifier)
                else:
                    data[(str(identifier), char)] = str(identifier)
            else:
                if (str(identifier), char) not in data.keys():
                    data[(str(identifier), char)] = str(identifier)
                else:
                    data[(str(identifier), char)] += str(identifier)
                    pass
                identifier += 1
            counter += 1
        def replacer(dictionary):
            translate_code = ""
            for (key, value) in dictionary.items():
                if key[1] == "+":
                    translate_code += "*p += %d;\n" % value.count(key[0])
                elif key[1] == '>':
                    translate_code += "p += %d;\n" % value.count(key[0])
                elif key[1] == '-':
                    translate_code += "*p -= %d;\n" % value.count(key[0])
                elif key[1] == '<':
                    translate_code += "p -= %d;\n" % value.count(key[0])
                elif key[1] == '.':
                    translate_code += "putchar(*p);\n"
                elif key[1] == ',':
                    translate_code += "*p = getchar();\n"
                elif key[1] == '[':
                    translate_code += "if (*p) do {\n"
                elif key[1] == ']':
                    translate_code += "} while (*p);\n"
            return translate_code
        return replacer(data)
    else:
        return "Error!"

print(brainfuck_to_c("++++[.++--]"))

class file_manager:
    import os
    def __init__(self, path):
        self.data = self.__Tree_dscanner(path)
        pass
    def __Tree_dscanner(self, path):
        data = {path:[]}
        for i in os.listdir(path):
            if os.path.isdir(i):
                data.update(self.__Tree_dscanner(i))
            else:
                data[path] += [i]
        return data
    def printpath(self):
        readable_data = ""
        for key in self.data:
            parser = "\n"
            for val in self.data[key]:
                parser += "   -"+str(val)+"\n"
            readable_data += "--dir ["+str(key)+"]"+parser
        return readable_data
    
class Infix:
    def __init__(self, function):
        self.function = function
    def __ror__(self, other):
        return Infix(lambda x, self=self, other=

def loading_bar(length=10, time_sleep: 'millisecond'=100, shape1='*', shape2='-'):
    import time, sys
    progress_bar = ""
    for i in range(length+1):
        if i % 2 == 0:
            progress_bar = "[%s%s][%s" % (i, '%', shape1 * i)
        else:
            progress_bar = "[%s%s][%s" % (i, '%', shape2 * i)
        sys.stdout.write(progress_bar)
        sys.stdout.flush()
        if i < length-1:
            time.sleep(time_sleep * (1e-3))
            sys.stdout.write('\r')
            sys.stdout.flush()
        else:
            sys.stdout.write('\r')
            sys.stdout.flush()
            sys.stdout.write(progress_bar)
    sys.stdout.write(']')
loading_bar(100, 500, '|')
def trailling_zeros(num):
	counter, start = 0, 5
	while int(num/start) >= 1:
		counter += int(num/start)
		start *= 5
	return counter
def set_variable(package_name, variable_name, variable_value):
	from sys import path as sys_path
	from os import path as os_path
	from os import listdir as list_dir
	for path in sys_path:
		if os_path.isdir(path):
			packages = [x for x in list_dir(path) if package_name == x.rsplit('.py')[0]]
			if len(packages) > 0:
				module_reader = open(os_path.join(path, packages[0]), 'r+')
				break
	else:
		return 'Module Not Found'
	data = module_reader.readlines()
	module_reader.seek(0)
	Found = False
	for line in data:
		if str(variable_name) + '=' in line.replace(' ', ''):
			splitted = line.replace(' ', '').split('=')
			splitted[splitted.index(variable_name) + 1] = repr(variable_value) if type(variable_value) == str else variable_value
			Found = True
			module_reader.write(' = '.join(splitted))
		else:
			module_reader.write(line)
		module_reader.truncate()
	if Found:
		return 'Variable changed successfully'
	else:
		return 'Variable cannot be found'
	module_reader.close()

def file_tree(path):
	import os
	path = os.path.realpath(path)
	path_data = {}
	if os.path.isdir(path):
		path_data[path] = []
		counter = 0
		for i in os.listdir(path):
			if os.path.isdir(os.path.join(path, i)):
				path_data[path].append({i: []})
				path_data[path][counter][i] = file_tree(os.path.join(path, i))
			else:
				path_data[path].append(i)
			counter += 1
		return path_data
	return path
exp = lambda x, y: x * exp(x, y-1) if y > 0 else 1
multiply = lambda x, y: x + multiply(x, y - 1) if y > 0 else 0
def f1(word):
	new_list, word, new_text = [word[0]], word[1:]+'x', ''
	while word:
		if new_list[-1] == word[0]:
			new_list += [word[0]]
			word = word[1:]
		else:
			new_text += '%s%s' % (new_list[-1], len(new_list))
			new_list, word = [word[0]], word[1:]
	return new_text
def f1(word):
	from string import ascii_letters
	new_dict = {key: str(word).count(key) for key in ascii_letters}
	return ''.join(['%s%s' % (key, val) if val > 0 else '' for key, val in new_dict.items()])

def flatten_list(new_list, result):
	for i in new_list:
		if isinstance(i, list):
			flaten_list(i, result)
		else:
			result.append(i)
	return result
	
def formater(number):
	counter, decimal_chunk, new_number, number = 0, '', '', str(number)
	decimal_chunk = number.rsplit('.', 1)[-1] if '.' in number else ''
	number = number.replace(decimal_chunk, '').replace('.', '')
	for digit in number[::-1]:
		if counter < 2:
			new_number += digit
			counter += 1
		else:
			new_number += '%s,' % digit
			counter = 0
	return new_number[::-1] + '.' + decimal_chunk if decimal_chunk else new_number[::-1]
	
def flatten_dict(new_dict, result=None, key=''):
	if result is None:
		result = {}
	for i in new_dict:
		if isinstance(new_dict[i], dict):
			flatten_dict(new_dict[i], result, i)
		else:
			if not key:
				result[i] = new_dict[i]
			else:
				result[str(key) + '.' + str(i)] = new_dict[i]
	return result
def unflatten_dict(new_dict):
	result = {}
	for i in new_dict:
		if '.' in i and not i.split('.')[0] in result:
			result.update({i.split('.')[0]: {i.split('.')[1]: new_dict[i]}})
		elif '.' in i and  i.split('.')[0] in result:
			result[i.split('.')[0]].update({i.split('.')[1]: new_dict[i]})
		else:
			result.update({i: new_dict[i]})
	return result

def treemap(func, list_):
	new_result = []
	for i in list_:
		if isinstance(i, list):
			new_result += [treemap(func, i)]
		else:
			new_result += [func(i)]
	return new_result

def tree_reverse(list_):
	list_ = list_[::-1]
	new_result = []
	for i in list_:
		if isinstance(i, list):
			new_result += [tree_reverse(i)]
		else:
			new_result += [i]
	return new_result
def dirtree(path, space_count=0, First = True):
	if os_path.isdir(path):
		if First:
			print(path)
		for i in dir_name(path):
			if os_path.isdir(os_path.join(path, i)):
				if space_count > 0:
					print('|' + ' ' * space_count + '|-- %s' % (os_path.split(i)[-1]))
				else:
					print(' ' * space_count + '|-- %s' % (os_path.split(i)[-1]))
				dirtree(os_path.join(path, i), space_count + 3, False)
			else:
				if space_count > 0:
					print('|' + ' ' * space_count + '|-- %s' % (os_path.split(i)[-1]))
				else:
					print(' ' * space_count + '|-- %s' % (os_path.split(i)[-1]))
	else:
		if space_count > 0:
			print('|' + ' ' * space_count + '|-- %s' % (os_path.split(i)[-1]))
		else:
			print(' ' * space_count + '|-- %s' % (os_path.split(i)[-1]))

def json_encode(data):
	if isinstance(data, bool):
		if data:
			return 'true'
		else:
			return 'false'
	elif isinstance(data, (int, float)):
		return str(data)
	elif isinstance(data, str):
		return '"%s"' % data.translate(str.maketrans({'"': '\"', '\t': '\\', '\n': '\\n'}))
	elif isinstance(data, list):
		return "[" + ", ".join(json_encode(d) for d in data) + "]"
	elif isinstance(data, dict):
		return '{' + ", ".join("%s: %s" % (json_encode(key), json_encode(val)) for key, val in data.items()) + "}"
	else:
		print(' ' * space_count + '|-- %s' % (os_path.split(path)[-1]))
def count_change(amount, coin_type):
	if amount == 0:
		return 1
	if amount < 0 or len(coin_type) == 0:
		return 0
	coin_copy = coin_type[:]
	coin_copy.remove(coin_type[0])
	with_first = count_change(amount, coin_copy)
	without_first = count_change(amount - coin_type[0], coin_type)
	return with_first + without_first

#{0}|{000|000|000|000|000|000|000|000}|{000|000|000|0} -> 32 bit
def decimal_bin_representation(number: float = 0.0):
	number = str(float(number)).split('.')
	whole_chunk, decimal_chunk = int(number[0]), float('0.%s' % number[1])
	memory_chunk = [[0 if whole_chunk >= 0 else 1], [0 for x in range(24)], [0 for x in range(7)]]
	whole_chunk = int(str(whole_chunk).lstrip('-'))
	if whole_chunk:
		for i in range(24):
			new_bit = whole_chunk % 2
			whole_chunk, memory_chunk[1][i] = (whole_chunk - new_bit) / 2, int(new_bit)
		memory_chunk[1] = memory_chunk[1][::-1]
	if decimal_chunk:
		for i in range(1, 8):
			memory_chunk[2][i-1] = 0 if decimal_chunk < 2 ** -i else 1
			decimal_chunk -= 2 ** -i if '-' not in str(decimal_chunk - 2 ** -i) else 0
	return '|'.join(''.join([str(x) for x in memory_chunk[i]]) for i in range(len(memory_chunk)))

def most_common(iterable: (dict, list, tuple, str) = None, n:int = 0):
    if not n:
        return None
    main_set = set()
    counting_dict = {}
    for item in iterable:
        if item in main_set:
            counting_dict[item] += 1
        else:
            main_set.add(item)
            counting_dict[item] = 0
    counting_dict = sorted(counting_dict.items(), key=lambda x: x[1], reverse=True)
    result_list = []
    counter = 0
    for k, v in counting_dict:
        if counter >= n:
            return result_list
        result_list.append((k, v))
        counter += 1
    return result_list
